from phaselib import fft_batch, OPD
from unwraplib import quality_guided
from auxlib import tiff_to_array_batch, get_files_recursive
import cv2
import numpy as np


def main():
    BATCH_SIZE = 4
    MASK_RADIUS = 32
    WAVELENGTH = 700e-9
    DIR_PATH = r"data/"

    all_files = get_files_recursive(DIR_PATH)
    for idx in range(0, len(all_files), BATCH_SIZE):
        ## INPUT HANDLEDED IN BATCHES
        file_path = all_files[idx : idx + BATCH_SIZE]
        array_batch = tiff_to_array_batch(file_path)

        ## PHASE ALGORITHM
        phase_batch = fft_batch(array_batch, MASK_RADIUS)

        ## UNWRAP
        unwrapped_phase_batch = quality_guided(phase_batch=phase_batch)

        ##ODP
        height_map_batch = OPD(unwrapped_phase_batch, WAVELENGTH)

        dst = np.empty_like(height_map_batch[0])
        for height_map in height_map_batch:
            height_map_normalized = cv2.normalize(
                src=height_map,
                dst=dst,
                alpha=0,
                beta=255,
                norm_type=cv2.NORM_MINMAX,
                dtype=cv2.CV_8U,
            )

            height_map_normalized = height_map_normalized.astype("uint8")

            cv2.imshow("whass good", height_map_normalized)
            while True:
                key = cv2.waitKey(100)  # Check every 100 ms
                if key != -1:  # If a key is pressed
                    break
                # Check if the window was closed
                if cv2.getWindowProperty("whass good", cv2.WND_PROP_VISIBLE) < 1:
                    break

        cv2.destroyAllWindows()


if __name__ == "__main__":
    main()
